import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split

def train_test_deploy():
    # Load and preprocess the marketing data
    data = pd.read_csv("marketing_data.csv")
    X = data.drop(["user_conversion"], axis=1)
    y = data["user_conversion"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Build and train the neural network model
    model = keras.Sequential([
        keras.layers.Dense(64, activation="relu", input_shape=(X_train.shape[1],)),
        keras.layers.Dense(32, activation="relu"),
        keras.layers.Dense(1, activation="sigmoid")
    ])
    model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)
    
    # Evaluate the model performance
    loss, accuracy = model.evaluate(X_test, y_test)
    print(f"Test Loss: {loss:.3f}, Test Accuracy: {accuracy:.3f}")
    
    # Save the trained model
    model.save("marketing_model.h5")
    
    # Deploy the model to optimize the marketing strategy
    new_data = pd.read_csv("new_marketing_data.csv")
    X_new = new_data.drop(["user_conversion"], axis=1)
    y_pred = model.predict(X_new)
    new_data["predicted_conversion"] = np.round(y_pred, decimals=0)
    new_data.to_csv("optimized_marketing_data.csv", index=False)
